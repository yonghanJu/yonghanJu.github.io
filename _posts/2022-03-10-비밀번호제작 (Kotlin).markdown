---
layout: post
title:  BFS 비밀번호제작 - BOJ_20304(Kotlin)
date:   2022-03-10 17:53:00 +0900
categories:   Kotlin
---

# 비밀번호 제작

__문제__

서강대학교 전산실에서 보안직원으로 일하는 향빈이는 한 통의 이메일을 받게 되었다.
 이메일에는 서버 관리자 계정에 대한 비정상적인 로그인 시도가 감지되었다는 내용이 적혀 있었고, 첨부된 파일에는 지금까지 로그인 시도에 사용된 비밀번호 목록이 있었다.
  참고로, 서버 관리자 계정의 비밀번호로는 0 이상 N 이하의 정수 중 하나를 사용할 수 있다.

  <br>

두 비밀번호의 안전 거리는 이진법으로 표현한 두 비밀번호의 서로 다른 자리의 개수로 정의한다. 예를 들어 3을 이진법으로 표현하면 0011, 8을 이진법으로 표현하면 1000이 되고, 이때 서로 다른 자리의 개수는 3개이므로 3과 8의 안전 거리는 3이 된다.

<Br>

어떤 비밀번호의 안전도는 지금까지 로그인 시도에 사용된 모든 비밀번호와의 안전 거리 중 최솟값으로 정의한다. 예를 들어 지금까지 로그인 시도에 사용된 비밀번호가 3과 4이라고 가정하면, 새로운 비밀번호 8에 대해 3과 8의 안전 거리는 3, 4와 8의 안전 거리는 2이므로 비밀번호 8의 안전도는 2가 된다.

<br>

향빈이는 해커가 비밀번호를 알아내기까지의 시간을 최대한 늦추기 위해 현재 사용 중인 관리자 계정 비밀번호의 안전도가 가장 높게끔 바꾸고 싶다. 이때, 안전도가 제일 높은 비밀번호의 안전도를 구하여라.

<Br>

# 2진수 변환

<br>

```kotlin
// int n -> 2진수 string
Integer.toBinaryString(n)
n.toString(2)

// 2진수 string -> int 
Integer.parseInt(str, 2)
```

<Br>



```kotlin
// 2022-03-10
// https://www.acmicpc.net/problem/20304

import java.io.*
import java.util.*

var m=0
var n =0
var len = 0
lateinit var q:ArrayDeque<Pair<Int,Int>>
lateinit var isVisited:BooleanArray
fun main() = with(BufferedReader(InputStreamReader(System.`in`))) {
    var st = StringTokenizer(readLine())
    var answer =0
    n = st.nextToken().toInt()
    q = ArrayDeque()
    isVisited = BooleanArray(n+1)
    len = Integer.toBinaryString(n).length
    st = StringTokenizer(readLine())
    m = st.nextToken().toInt()
    st = StringTokenizer(readLine())
    while(st.hasMoreTokens()){
        val num = st.nextToken().toInt()
        q.addFirst(Pair(num, 0))
        isVisited[num]=true
    }

    while(q.isEmpty().not()){
        val cur= q.removeLast()
        var curB = Integer.toBinaryString(cur.first)
        val sb = StringBuilder()
        repeat(len-curB.length){sb.append(0)}
        curB = sb.append(curB).toString()
        answer = cur.second

        for(at in 0 until len){
            val ns = curB.toCharArray()
            if(ns[at]=='1') ns[at]='0' else ns[at]='1'
            val nn = Integer.parseInt(String(ns),2)
            if(nn>n) continue
            else if(isVisited[nn]) continue
            else{
                q.addFirst(Pair(nn,cur.second+1))
                isVisited[nn]=true
            }
        }
    }

    println( answer)
}
```