---
layout: post
title:  Fly me to the Alpha Centauri
date:   2021-06-13 00:46:35 +0300
categories:   Algorithm
---
# Fly me to the Alpha Centauri - java

<br>

### 문제 설명
---
우현이는 어린 시절, 지구 외의 다른 행성에서도 인류들이 살아갈 수 있는 미래가 오리라 믿었다. 그리고 그가 지구라는 세상에 발을 내려 놓은 지 23년이 지난 지금, 세계 최연소 ASNA 우주 비행사가 되어 새로운 세계에 발을 내려 놓는 영광의 순간을 기다리고 있다.

그가 탑승하게 될 우주선은 Alpha Centauri라는 새로운 인류의 보금자리를 개척하기 위한 대규모 생활 유지 시스템을 탑재하고 있기 때문에, 그 크기와 질량이 엄청난 이유로 최신기술력을 총 동원하여 개발한 공간이동 장치를 탑재하였다.

 하지만 이 공간이동 장치는 이동 거리를 급격하게 늘릴 경우 기계에 심각한 결함이 발생하는 단점이 있어서, 이전 작동시기에 k광년을 이동하였을 때는 k-1 , k 혹은 k+1 광년만을 다시 이동할 수 있다.
 
  예를 들어, 이 장치를 처음 작동시킬 경우 -1 , 0 , 1 광년을 이론상 이동할 수 있으나 사실상 음수 혹은 0 거리만큼의 이동은 의미가 없으므로 1 광년을 이동할 수 있으며, 그 다음에는 0 , 1 , 2 광년을 이동할 수 있는 것이다. ( 여기서 다시 2광년을 이동한다면 다음 시기엔 1, 2, 3 광년을 이동할 수 있다. )

김우현은 공간이동 장치 작동시의 에너지 소모가 크다는 점을 잘 알고 있기 때문에 x지점에서 y지점을 향해 최소한의 작동 횟수로 이동하려 한다.

 하지만 y지점에 도착해서도 공간 이동장치의 안전성을 위하여 y지점에 도착하기 바로 직전의 이동거리는 반드시 1광년으로 하려 한다.

김우현을 위해 x지점부터 정확히 y지점으로 이동하는데 필요한 공간 이동 장치 작동 횟수의 최솟값을 구하는 프로그램을 작성하라.

출처 : BOJ(1011) https://www.acmicpc.net/problem/1011


<br>

---
### 풀이 과정

1. 최단 거리를 구하기 위해서 최대한 많이 속력을 +1만큼 증가 시켜야 한다.

2. y 지점에 도착 했을 때 우주선의 속력은 1이므로 충분히 속력을 높인 뒤에는 다시 속력을 낮춰준다.

3. **1 + 2 + 3 + ... + n + n-1 + n-2 + ... +1 = n*n** 을 활용해서 최대 속력을 구한다.

4. 최대 속력까지 높여 이동하고 부족한 거리를 확인한다.

5. 부족한 거리에 따라 이동 횟수를 추가해준다.

<br>

---
### ex
- x 값은 0, y 값은 따라서 두 지점 사이의 거리는 120이라고 가정하자.

- n=11 일 때,  n*n = 121 이므로 두 지점 사이의 거리를 넘어가 버려 최대 10의 속력을 가질 수 있다.

- 1 + ... + 10 + ... + 1 = 10*10 = 100 이고 총 19번 덧샘(이동) 했고 남은 거리는 120 - 100 = 20 이다.

- **남은 거리를 n(최대속력)으로 나눈다.**

    여기서 만약 **나누어 떨어진다면** 그 몫 만큼 더 이동하면 되고(위 예제의 경우 20/10 = 2) **나누어 떨어지지 않는** 경우는 **몫+1** 만큼 더 이동시키면 된다.

- 위 예제의 경우 남은 거리를 n 으로 나누었을 때 나머지가 0 이었으므로 최대속력인 10 일 때 몫인 2 번 더 이동하면 된다. (10*10 + 10 + 10)

    만약 나누어 떨어지지 않는 경우, 예를 들어 3이 남았다면 속력이 3인 시점에서 같은 속력으로 한번 더 이동하면 되므로 몫+1 만큼 더 이동 하면 된다.

<br>

---
### 풀이 코드
```java
import java.util.*;

public class Main {
	public static void main(String[] args) {
        
		Scanner sc = new Scanner(System.in);
		int n = Integer.valueOf((sc).nextLine());   // 테스트 케이스
		int[][] arr = new int[n][2];
		for(int i =0; i<n; i++) {       // 테스트 케이스별 x, y 값 저장
			arr[i] =  Arrays.asList(sc.nextLine().split(" ")).stream().mapToInt(Integer::parseInt).toArray();
		}
		
		for(int i =0; i<n; i++) {
			int distance = arr[i][1] - arr[i][0]; // 두 지점 사이 거리
			int an =0;                           // 정답을 저장할 변수
			int sqrt = (int)Math.sqrt((double)distance); // 최대 속력
			int m =  distance - (int)Math.pow(sqrt, 2);  // 남은 거리
			if(m%sqrt==0) an = 2*sqrt - 1 +m/sqrt;  // 나누어 떨어 질 경우
			else an = 2*sqrt+m/sqrt;       // 나누어 떨어지지 않는 경우
			System.out.println(an+"");     // 정답 출력
		}
   }
}
```

<br>

---
### 느낀 점
처음 문제를 읽었을 때 풀이 방법이 바로 떠오르지 않고 다른 방법으로 접근한다면 쉬운 문제 난이도에 비해서 많이 돌아갈 수도 있다고 생각한다. 

다행히 1부터 n까지 수의 합이 n(n+1)/2 라는 기본 수학 지식을 까먹지 않고 있어서 바로 문제에 적용시켜서 풀 수 있었다. 

**틈틈히 기초 수학 공부를 해야겠다.**