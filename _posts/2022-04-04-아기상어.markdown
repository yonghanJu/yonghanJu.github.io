---
layout: post
title:  Simulation 아기상어 - BOJ_16236
date:   2022-04-04 00:43:00 +0900
categories:   Algorithm
---


# 아기 상어

<br>

__문제__

N×N 크기의 공간에 물고기 M마리와 아기 상어 1마리가 있다. 공간은 1×1 크기의 정사각형 칸으로 나누어져 있다. 한 칸에는 물고기가 최대 1마리 존재한다.

아기 상어와 물고기는 모두 크기를 가지고 있고, 이 크기는 자연수이다. 가장 처음에 아기 상어의 크기는 2이고, 아기 상어는 1초에 상하좌우로 인접한 한 칸씩 이동한다.

아기 상어는 자신의 크기보다 큰 물고기가 있는 칸은 지나갈 수 없고, 나머지 칸은 모두 지나갈 수 있다. 아기 상어는 자신의 크기보다 작은 물고기만 먹을 수 있다. 따라서, 크기가 같은 물고기는 먹을 수 없지만, 그 물고기가 있는 칸은 지나갈 수 있다.

아기 상어가 어디로 이동할지 결정하는 방법은 아래와 같다.

더 이상 먹을 수 있는 물고기가 공간에 없다면 아기 상어는 엄마 상어에게 도움을 요청한다.
* 먹을 수 있는 물고기가 1마리라면, 그 물고기를 먹으러 간다.
* 먹을 수 있는 물고기가 1마리보다 많다면, 거리가 가장 가까운 물고기를 먹으러 간다.
* 거리는 아기 상어가 있는 칸에서 물고기가 있는 칸으로 이동할 때, 지나야하는 칸의 개수의 최솟값이다.
* 거리가 가까운 물고기가 많다면, 가장 위에 있는 물고기, 그러한 물고기가 여러마리라면, 가장 왼쪽에 있는 물고기를 먹는다.

아기 상어의 이동은 1초 걸리고, 물고기를 먹는데 걸리는 시간은 없다고 가정한다. 즉, 아기 상어가 먹을 수 있는 물고기가 있는 칸으로 이동했다면, 이동과 동시에 물고기를 먹는다. 물고기를 먹으면, 그 칸은 빈 칸이 된다.

아기 상어는 자신의 크기와 같은 수의 물고기를 먹을 때 마다 크기가 1 증가한다. 예를 들어, 크기가 2인 아기 상어는 물고기를 2마리 먹으면 크기가 3이 된다.

공간의 상태가 주어졌을 때, 아기 상어가 몇 초 동안 엄마 상어에게 도움을 요청하지 않고 물고기를 잡아먹을 수 있는지 구하는 프로그램을 작성하시오.

<br>

__풀이__

<br>

처음엔 단순히 아기 상어가 움직이는 방식(위,왼쪽,오른쪽,아래)에 맞춰 bfs를 통해 최단 거리로 이동하는 도록 알고리즘을 짰다.

처음으로 먹을 수 있는 물고기가 나왔을 때 물고기를 먹도록 짠다면 예제 4번에서 오답이 나오게 된다.

그 이유는 같은 같은 거리에 위치한 큐 안의 다른 위치에서 더 높은 우선순위를 가질 수 있기 때문이다.

이 점을 간과해서 오랬동안 삽질을 했다.

<br>

예를 들어 거리가 4로 같은 위치에 두 물고기가 있다고 해보자.

bfs탐색 순서에 의해 위, 왼쪽, 오른쪽, 아래 순서로 탐색을 한다.

만약 왼쪽끝에 4간 떨어진 곳의 먹이와, 오른쪽으로 3칸 위로 1간 떨어져있는 먹이가 있다면 bfs 탐색 순서에 의해 왼쪽의 먹이 먼저 먹게 되지만 문제의 요구조건에 의하면 __오른쪽의 먹이를 먼저 먹어야한다!!__

<br>

위 사실에 주의해서 다시 코드를 짜보자.

먹을 수 있는 물고기가 큐에서 pop되었다면 큐 안에 같은 거리의 물고기들을 모두 pop해서 우선 순위의 물고기를 탐색해야 한다.

<br>

```kotlin
// 2022-04-03
// https://www.acmicpc.net/problem/16236

import java.io.*
import java.util.*

data class Data(val x:Int, val y:Int, val cnt:Int)

var n =0
var sharkSize = 2
var eat = 0
var curX = 0
var curY = 0
var answer = 0
val dx = intArrayOf(-1,0,0,1)
val dy = intArrayOf(0,-1,1,0)

lateinit var board:Array<MutableList<Int>>

fun main():Unit = with(BufferedReader(InputStreamReader(System.`in`))) {
    n = readLine().toInt()
    board = Array(n){ mutableListOf() }
    repeat(n){it1->
        val st = StringTokenizer(readLine())
        repeat(n){it2->
            val c = st.nextToken().toInt()
            board[it1].add(c)
            if(c==9){
                curX = it1
                curY = it2
                board[curX][curY] = 0
            }
        }
    }

    while(bfs(curX,curY)){}
    println(answer)
}

fun bfs(startX:Int, startY:Int):Boolean{
    val q = ArrayDeque<Data>()
    val isVisited = Array(n){BooleanArray(n)}
    q.addFirst(Data(startX,startY,0))
    isVisited[startX][startY]=true

    while(q.isEmpty().not()){
        var cur = q.removeLast()

        if(board[cur.x][cur.y] in 1 until sharkSize){

            while(q.isEmpty().not()){
                val tmp = q.removeLast()
                if((cur.cnt == tmp.cnt && board[tmp.x][tmp.y]  in 1 until sharkSize).not()) continue
                if(tmp.x < cur.x) cur = tmp
                else if(tmp.x==cur.x && tmp.y < cur.y) cur = tmp
            }

            eat++
            board[cur.x][cur.y] = 0
            curX = cur.x
            curY = cur.y
            answer += cur.cnt
            if(eat==sharkSize){
                sharkSize++
                eat = 0
            }
            return true
        }

        for(i in 0..3){
            val nx = cur.x + dx[i]
            val ny = cur.y + dy[i]

            if((nx in 0 until n && ny in 0 until n).not()) continue
            if(isVisited[nx][ny]) continue
            if(board[nx][ny] > sharkSize) continue

            isVisited[nx][ny]=true
            q.addFirst(Data(nx,ny,cur.cnt+1))
        }
    }

    return false
}
```